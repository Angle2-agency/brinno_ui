<section class="w-75 mx-auto">
    <h3>Switchers</h3>
    <fieldset>
        <div class="pt-2 ps-4 d-flex flex-column gap-2">
            <div class="d-flex align-items-center justify-content-between">
                <DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@Multimedia" SizeMode="SizeMode.Small">Small
                    Size</DxCheckBox>
            </div>
            <div class="d-flex align-items-center justify-content-between">
                <DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@AirConditioning">Medium Size
                </DxCheckBox>
            </div>
            <div class="d-flex align-items-center justify-content-between">
                <DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@ParkingSensors" SizeMode="SizeMode.Large">Large
                    Size </DxCheckBox>
            </div>
        </div>
    </fieldset>
</section>

@code {
    CarOptions options = CarOptions.AirConditioning | CarOptions.HeatedSeats;
    bool? SelectAllState
    {
        get
        {
            if (options == CarOptions.None)
                return false;
            if (options == CarOptions.All)
                return true;
            return null;
        }
        set
        {
            if (value.HasValue)
                options = value.Value ? CarOptions.All : CarOptions.None;
        }
    }
    bool AirConditioning
    {
        get => options.HasFlag(CarOptions.AirConditioning);
        set => SetOption(value, CarOptions.AirConditioning);
    }
    bool Multimedia
    {
        get => options.HasFlag(CarOptions.Multimedia);
        set => SetOption(value, CarOptions.Multimedia);
    }
    bool ParkingSensors
    {
        get => options.HasFlag(CarOptions.ParkingSensors);
        set => SetOption(value, CarOptions.ParkingSensors);
    }
    bool HeatedSeats
    {
        get => options.HasFlag(CarOptions.HeatedSeats);
        set => SetOption(value, CarOptions.HeatedSeats);
    }
    void SetOption(bool value, CarOptions enumValue)
    {
        if (value)
            options |= enumValue;
        else
            options &= ~enumValue;
    }
    decimal GetTotalPrice()
    {
        decimal price = 0;
        price += Multimedia ? 130 : 0;
        price += AirConditioning ? 800 : 0;
        price += ParkingSensors ? 400 : 0;
        price += HeatedSeats ? 230 : 0;
        return price;
    }


    [Flags]
    enum CarOptions
    {
        None = 0x0,
        AirConditioning = 0x1,
        Multimedia = 0x2,
        ParkingSensors = 0x4,
        HeatedSeats = 0x8,
        All = AirConditioning | Multimedia | ParkingSensors | HeatedSeats
    }
}